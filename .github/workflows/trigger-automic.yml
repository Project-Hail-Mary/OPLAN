name: Trigger Automic

on:
  push:
    branches:
      - main

jobs:
  find-production-commit:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Set up Git
        run: |
          git config --global user.name 'github-actions[bot]'
          git config --global user.email 'github-actions[bot]@users.noreply.github.com'

      - name: Find relevant commits
        run: |
          set -e
          echo "Finding the most recent commit with 'PRODUCTION' in the message"
          production_commit=$(git log --grep='PRODUCTION' -n 1 --pretty=format:%H || echo "none")
          echo "Production Commit SHA: $production_commit"
          echo "production_commit=$production_commit" >> $GITHUB_ENV

          echo "Finding the most recent commit before the current commit"
          previous_commit=$(git rev-list HEAD^1 -n 1 || echo "none")
          echo "Previous Commit SHA: $previous_commit"
          echo "previous_commit=$previous_commit" >> $GITHUB_ENV

          latest_commit=$(git rev-parse HEAD)
          echo "Latest Commit SHA: $latest_commit"
          echo "latest_commit=$latest_commit" >> $GITHUB_ENV

      - name: Determine base commit
        run: |
          set -e
          if [ "$production_commit" != "none" ]; then
            echo "Using Production Commit ($production_commit) as baseline"
            base_commit=$production_commit
          elif [ "$previous_commit" != "none" ]; then
            echo "Using Previous Commit ($previous_commit) as baseline"
            base_commit=$previous_commit
          else
            echo "Using latest commit ($latest_commit) as baseline"
            base_commit=$latest_commit
          fi
          echo "Base Commit SHA: $base_commit"
          echo "base_commit=$base_commit" >> $GITHUB_ENV

      - name: Identify the updated file
        id: updated_file
        run: |
          set -e
          updated_file=$(git diff-tree --no-commit-id --name-only -r $latest_commit)
          echo "Updated file(s): $updated_file"
          echo "updated_file=$updated_file" >> $GITHUB_ENV

      - name: Log updated file
        run: |
          set -e
          echo "Updated file from env: ${{ steps.updated_file.outputs.updated_file }}"

      - name: Trigger Automic
        run: |
          set -e
          updated_file=${{ steps.updated_file.outputs.updated_file }}
          echo "Updated file for processing: $updated_file"

          if [ -n "$updated_file" ]; then
            echo "Processing file: $updated_file"

            if [ "$updated_file" != ".github/workflows/trigger-automic.yml" ]; then
              encoded_file=$(echo ${updated_file} | sed 's#/#%2F#g')
              if [ "$base_commit" != "$latest_commit" ]; then
                diff_link="https://github.com/Project-Hail-Mary/OPLAN/compare/${base_commit}...${latest_commit}?diff=split%26w=%26short_path=${encoded_file}"
              else
                diff_link="https://github.com/Project-Hail-Mary/OPLAN/commit/${latest_commit}?diff=split%26w=%26short_path=${encoded_file}"
              fi
              file_commit_link="${latest_commit}"
              echo "Constructed diff link: ${diff_link}"
              echo "File Commit Link: ${file_commit_link}"

              curl --location 'http://104.196.70.116:8088/ae/api/v1/103/executions' \
                --header 'Content-Type: application/json' \
                --user '103/UDM/UDM:udm' \
                --data "{\"object_name\": \"GITHUB.PRE.APPROVE\", \"inputs\": {\"&FILE#\": \"${file_commit_link}\", \"&DIFF_LINK#\": \"${diff_link}\", \"&LATEST_COMMIT_SHA#\": \"${latest_commit}\"}}"
            else
              echo "Skipping curl command for .github/workflows/trigger-automic.yml"
            fi
          else
            echo "No updated file detected."
          fi

      - name: Log Completion
        run: |
          echo "Script execution completed."
